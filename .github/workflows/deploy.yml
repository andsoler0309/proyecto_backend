name: CI/CD para despliegue en GKE

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout del código
      uses: actions/checkout@v3

    - name: Configurar la autenticación de Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Configurar gcloud
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        install_components: 'gke-gcloud-auth-plugin'

    # - name: Configurar kubectl
    #   run: |
    #     gcloud components install kubectl
    #     gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER }} --zone ${{ secrets.GKE_ZONE }} --project ${{ secrets.GCP_PROJECT_ID }}

    - name: Configurar Docker para Artifact Registry
      run: |
        gcloud auth configure-docker us-central1-docker.pkg.dev
      
    - name: Definir etiqueta única
      id: tag
      run: echo "TAG=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV

    - name: Construir y empujar imágenes Docker
      run: |
        for service in */; do
          # Ignorar las carpetas deployment/ y .github/
          if [[ "$service" == "deployment/" || "$service" == ".github/" ]]; then
            continue
          fi

          if [ -d "$service" ]; then
            SERVICE_NAME=$(basename "$service")
            echo "Construyendo y empujando la imagen para $SERVICE_NAME con la etiqueta $TAG..."

            docker build --platform linux/amd64 -t us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/abcall/$SERVICE_NAME:${TAG} ./$SERVICE_NAME
            docker push us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/abcall/$SERVICE_NAME:${TAG}
          fi
        done

    - name: Desplegar a Cloud Run
      run: |
        for service in */; do
          # Ignorar las carpetas deployment/ y .github/
          if [[ "$service" == "deployment/" || "$service" == ".github/" || "$service" == "gestor-fidelizacion/" || "$service" == "vista-360/" ]]; then
            continue
          fi

          if [ -d "$service" ]; then
            SERVICE_NAME=$(basename "$service")
            IMAGE_URL=us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/abcall/$SERVICE_NAME:${TAG}

            echo "Desplegando $SERVICE_NAME a Cloud Run con la imagen $IMAGE_URL..."

            gcloud run deploy $SERVICE_NAME \
              --image $IMAGE_URL \
              --region us-central1 \
              --platform managed \
              --allow-unauthenticated \
              --project ${{ secrets.GCP_PROJECT_ID }} \
              --port 5000
          fi
        done

    # - name: Actualizar los manifiestos de Kubernetes con las nuevas imágenes
    #   run: |
    #     for service in */; do
    #       # Ignorar las carpetas deployment/ y .github/
    #       if [[ "$service" == "deployment/" || "$service" == ".github/" || "$service" == "gestor-fidelizacion/" || "$service" == "vista-360/" ]]; then
    #         continue
    #       fi

    #       if [ -d "$service" ]; then
    #         SERVICE_NAME=$(basename "$service")
    #         DEPLOYMENT_FILE="deployment/${SERVICE_NAME}-deployment.yaml"

    #         if [ -f "$DEPLOYMENT_FILE" ]; then
    #           echo "Actualizando el manifiesto de $SERVICE_NAME con la imagen us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/abcall/$SERVICE_NAME:${TAG}..."

    #           # Reemplazar únicamente la línea que contiene 'image:' con la nueva imagen
    #           sed -i "s|image: .*|image: us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/abcall/$SERVICE_NAME:${TAG}|g" "$DEPLOYMENT_FILE"
    #         else
    #           echo "Advertencia: El archivo $DEPLOYMENT_FILE no existe. Asegúrate de que el manifiesto de Kubernetes esté correctamente nombrado."
    #         fi
    #       fi
    #     done

    # - name: Desplegar en GKE
    #   run: |
    #     kubectl apply -f deployment/

    # - name: Configurar Git para Commits Automáticos
    #   if: github.event_name == 'push' && !contains(github.event.head_commit.message, '[ci auto-fix]')
    #   run: |
    #     git config user.name "github-actions[bot]"
    #     git config user.email "github-actions[bot]@users.noreply.github.com"

    # - name: Commit y Push de Cambios Automatizados
    #   if: github.event_name == 'push' && !contains(github.event.head_commit.message, '[ci auto-fix]')
    #   run: |
    #     git add deployment/
    #     git commit -m "Auto-fix: Actualizar imágenes de Docker [ci auto-fix]"
    #     git push
